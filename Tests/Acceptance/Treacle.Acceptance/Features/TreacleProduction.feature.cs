// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.17379
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Treacle.Acceptance.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Treacle production")]
    public partial class TreacleProductionFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TreacleProduction.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Treacle production", @"As a developer I want an easy way to access database stored procedures
That unlike Linq or Entity Framework the product will use stright calls
to the stored procedures with parameters.

The factory will produce gateways so we can abstract them away and produce mock 
gateway implementations, that can return structured data.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calling create on the factory creates a new instance of the data gateway with an " +
            "open connection")]
        [NUnit.Framework.CategoryAttribute("TreacleFactory")]
        public virtual void CallingCreateOnTheFactoryCreatesANewInstanceOfTheDataGatewayWithAnOpenConnection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calling create on the factory creates a new instance of the data gateway with an " +
                    "open connection", new string[] {
                        "TreacleFactory"});
#line 10
this.ScenarioSetup(scenarioInfo);
#line 11
 testRunner.Given("I am a developer");
#line 12
 testRunner.And("I did create a gateway factory");
#line 13
 testRunner.When("I attempt to create a database gateway");
#line 14
 testRunner.Then("I should have created typeof \'Treacle.DataGateway\'");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("adding a parameter to the gateway")]
        [NUnit.Framework.CategoryAttribute("TreacleDBGateway")]
        public virtual void AddingAParameterToTheGateway()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("adding a parameter to the gateway", new string[] {
                        "TreacleDBGateway"});
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given("I am a developer");
#line 19
 testRunner.And("I did create a gateway factory");
#line 20
 testRunner.And("I did create a database gateway");
#line 21
 testRunner.When("I attempt to add a database parameter to the gateway");
#line 22
 testRunner.Then("I should see the gateway parameters count equal \'1\'");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calling a stored procedure that returns nothing")]
        [NUnit.Framework.CategoryAttribute("TreacleDBGateway")]
        public virtual void CallingAStoredProcedureThatReturnsNothing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calling a stored procedure that returns nothing", new string[] {
                        "TreacleDBGateway"});
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("I am a developer");
#line 27
 testRunner.And("I did create a gateway factory");
#line 28
 testRunner.And("I did create a database gateway");
#line 29
 testRunner.And("I did add a parameter containing, parameterName \'@name\' parameterValue \'test\' typ" +
                    "e \'string\'");
#line 30
 testRunner.When("I attempt to execute the procedure, procedureName \'spNonQuery\'");
#line 31
 testRunner.Then("I should see that the database is updated with \'test\'");
#line 32
 testRunner.And("I should see that the gateway connection is \'Closed\'");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calling a stored procedure that returns a single result")]
        [NUnit.Framework.CategoryAttribute("TreacleDBGateway")]
        public virtual void CallingAStoredProcedureThatReturnsASingleResult()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calling a stored procedure that returns a single result", new string[] {
                        "TreacleDBGateway"});
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
 testRunner.Given("I am a developer");
#line 37
 testRunner.And("I did create a gateway factory");
#line 38
 testRunner.And("I did create a database gateway");
#line 39
 testRunner.And("I did add a parameter containing, parameterName \'@Id\', parameterValue \'1\' type \'i" +
                    "nteger\'");
#line 40
 testRunner.When("I attempt to execute a scaller procedure, name \'spScaller\'");
#line 41
 testRunner.Then("I should see the result \'test\'");
#line 42
 testRunner.And("I should see that the gateway connection is \'closed\'");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calling a stored procedure that returns multiple rows")]
        [NUnit.Framework.CategoryAttribute("TreacleDBGateway")]
        public virtual void CallingAStoredProcedureThatReturnsMultipleRows()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calling a stored procedure that returns multiple rows", new string[] {
                        "TreacleDBGateway"});
#line 45
this.ScenarioSetup(scenarioInfo);
#line 46
 testRunner.Given("I am a developer");
#line 47
 testRunner.And("I did create a gateway factory");
#line 48
 testRunner.And("I did create a database gateway");
#line 49
 testRunner.When("I execute the procedure, name \'spReaderResult\'");
#line 50
 testRunner.Then("I should have received \'an IDbReader object\'");
#line 51
 testRunner.And("I should see that the gateway connection is \'open\'");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
